Array.prototype.Where = function (e) { var t = new Array; for (var n = 0; n < this.length; n++) { if (e(this[n], n)) { t[t.length] = this[n] } } return t }; Array.prototype.Select = function (e) { var t = new Array; for (var n = 0; n < this.length; n++) { if (e(this[n])) { t[t.length] = e(this[n]) } } return t }; Array.prototype.OrderBy = function (e) { var t = new Array; for (var n = 0; n < this.length; n++) { t[t.length] = this[n] } return t.sort(function (t, n) { var r = e(t); var i = e(n); return r < i ? -1 : r > i ? 1 : 0 }) }; Array.prototype.OrderByDescending = function (e) { var t = new Array; for (var n = 0; n < this.length; n++) { t[t.length] = this[n] } return t.sort(function (t, n) { var r = e(n); var i = e(t); return r < i ? -1 : r > i ? 1 : 0 }) }; Array.prototype.Count = function (e) { if (e == null) return this.length; else return this.Where(e).length }; Array.prototype.Distinct = function (e) { var t; var n = new Object; var r = new Array; for (var i = 0; i < this.length; i++) { t = e(this[i]); if (n[t] == null) { n[t] = true; r[r.length] = t } } n = null; return r }; Array.prototype.Any = function (e) { for (var t = 0; t < this.length; t++) { if (e(this[t], t)) { return true } } return false }; Array.prototype.All = function (e) { for (var t = 0; t < this.length; t++) { if (!e(this[t], t)) { return false } } return true }; Array.prototype.Reverse = function () { var e = new Array; for (var t = this.length - 1; t > -1; t--) e[e.length] = this[t]; return e }; Array.prototype.First = function (e) { if (e != null) { return this.Where(e).First() } else { if (this.length > 0) return this[0]; else return null } }; Array.prototype.Last = function (e) { if (e != null) { return this.Where(e).Last() } else { if (this.length > 0) return this[this.length - 1]; else return null } }; Array.prototype.ElementAt = function (e) { return this[e] }; Array.prototype.Concat = function (e) { return this.concat(e) }; Array.prototype.DefaultIfEmpty = function (e) { if (this.length == 0) { return e } return this }; Array.prototype.ElementAtOrDefault = function (e, t) { if (e >= 0 && e < this.length) { return this[e] } return t }; Array.prototype.FirstOrDefault = function (e) { return this.First() || e }; Array.prototype.LastOrDefault = function (e) { return this.Last() || e }; Array.prototype.Intersect = function (e, t) { var n; if (t != undefined) { n = t } else { n = function (e, t, n, r) { return e == n } } var r = new Array; for (var i = 0; i < this.length; i++) { for (var s = 0; s < e.length; s++) { if (n(this[i], i, e[s], s)) { r[r.length] = this[i] } } } return r }; Array.prototype.Contains = function(obj) { var i = this.length; while (i--) { if (this[i] === obj) { return true; } } return false; }
